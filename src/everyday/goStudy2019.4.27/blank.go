package main

import (
	"fmt"
	_ "io" //-----------匿名
	"net"  //---------
	"os"
)

var _ = net.AddrError{} //这种方式还是使用net包，

//空白标识符为哪些需要出现多个值但是其实可以忽略的变量提供了一个“只写”
//的占位符。。。
//如果你在程序中导入了一个包或声明了一个变量却没有使用的话,会引起编译错误。
// 因为，导入未使用的包不仅会使程序变得臃肿，同时也降低了编译效率；
// 初始化一个变量却不使用，轻则造成对计算的浪费，重则可能会引起更加严重BUG。
// 当一个程序处于开发阶段时，会存在一些暂时没有被使用的导入包和变量，
// 如果为了使程序编译通过而将它们删除，那么后续开发需要使用时，
// 又得重新添加，这非常麻烦。空白标识符为上述场景提供了解决方案。

func main() {

	fd, err := os.Stat("filepath")
	if os.IsNotExist(err) {
		fmt.Printf("%s dones not exist\n", filepath)
	}
	_ = fd //注意fd没有使用
}
